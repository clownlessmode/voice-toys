import { Order } from "@/components/entities/order/model/types";
import nodemailer from "nodemailer"; // –µ—Å–ª–∏ —Ä—É–≥–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π: import * as nodemailer from "nodemailer";
const TELEGRAM_BOT_TOKEN = "7749626891:AAGwK5_ZSNoCy_H91prfz4BMVGwmByfv24k";
const TELEGRAM_CHAT_ID = process.env.TELEGRAM_CHAT_ID || "@voice_toys_orders"; // –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —á–µ—Ä–µ–∑ env
const transporter = nodemailer.createTransport({
  service: "gmail",
  auth: {
    user: "eclipselucky@gmail.com",
    pass: "rrsp cziy zmze xdxo", // –ø–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Gmail
  },
});

async function sendEmailToMe(subject: string, text: string): Promise<void> {
  try {
    await transporter.sendMail({
      from: "eclipselucky@gmail.com",
      to: "eclipselucky@gmail.com", // –≤—Å–µ–≥–¥–∞ —Å—é–¥–∞
      subject,
      text,
      html: text.replace(/\n/g, "<br>"),
    });
    console.log("Email sent to eclipselucky@gmail.com");
  } catch (e) {
    console.error("Failed to send email:", e);
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –≤ Markdown v2
function escapeMarkdownV2(text: string): string {
  return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, "\\$&");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message: string): Promise<boolean> {
  try {
    const response = await fetch(
      `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: TELEGRAM_CHAT_ID,
          text: message,
          parse_mode: "MarkdownV2",
        }),
      }
    );

    const result = await response.json();

    if (!response.ok) {
      console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", result);
      return false;
    }

    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:", result);
    return true;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
    return false;
  }
}

export interface OrderExtended extends Order {
  customerEmail?: string;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
export async function sendOrderNotification(
  order: OrderExtended,
  type: "created" | "paid"
): Promise<boolean> {
  try {
    const emoji = type === "paid" ? "üí∞" : "üõí";
    const title = type === "paid" ? "–ó–ê–ö–ê–ó –û–ü–õ–ê–ß–ï–ù" : "–ù–û–í–´–ô –ó–ê–ö–ê–ó";

    // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    const orderNumber = escapeMarkdownV2(order.orderNumber);
    const customerName = escapeMarkdownV2(order.customerName);
    const customerPhone = escapeMarkdownV2(order.customerPhone);
    const amount = escapeMarkdownV2(order.totalAmount.toString());
    const currency = escapeMarkdownV2(order.currency);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã
    const itemsText = order.items
      .map((item) => {
        const name = escapeMarkdownV2(item.product.name);
        const quantity = escapeMarkdownV2(item.quantity.toString());
        const price = escapeMarkdownV2(item.price.toString());
        return `  ‚Ä¢ ${name} \\- ${quantity} —à—Ç\\. \\(${price} ${currency}\\)`;
      })
      .join("\n");

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏
    const deliveryType =
      order.deliveryType === "pickup" ? "–°–∞–º–æ–≤—ã–≤–æ–∑" : "–î–æ—Å—Ç–∞–≤–∫–∞";
    const deliveryText = escapeMarkdownV2(deliveryType);

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–¥—Ä–µ—Å –µ—Å–ª–∏ –µ—Å—Ç—å
    let deliveryInfo = deliveryText;
    if (order.deliveryAddress) {
      const address = escapeMarkdownV2(order.deliveryAddress);
      deliveryInfo += `\n*–ê–¥—Ä–µ—Å:* ${address}`;
    }

    const message = `${emoji} *${title}*

*–ó–∞–∫–∞–∑:* ${orderNumber}
*–ö–ª–∏–µ–Ω—Ç:* ${customerName}
*–¢–µ–ª–µ—Ñ–æ–Ω:* ${customerPhone}

*–¢–æ–≤–∞—Ä—ã:*
${itemsText}

*–ò—Ç–æ–≥–æ:* ${amount} ${currency}

*–î–æ—Å—Ç–∞–≤–∫–∞:* ${deliveryInfo}

*–í—Ä–µ–º—è:* ${escapeMarkdownV2(new Date().toLocaleString("ru-RU"))}`;
    const emailSubject = `${title} ‚Äî ${order.orderNumber}`;
    const emailText = message.replace(/\\/g, ""); // —É–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –∏–∑ —Ç–µ–∫—Å—Ç–∞
    sendEmailToMe(emailSubject, emailText).catch(() => {});
    return await sendTelegramMessage(message);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error);
    return false;
  }
}
