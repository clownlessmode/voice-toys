import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import { transformOrderFromDB } from "@/lib/order-utils";
import { verifyCallback } from "@/lib/modulbank";
import { sendOrderNotification } from "@/lib/telegram";
import { fetchCdekToken } from "@/app/api/cdek/offices/route";
import { Order as PrismaOrder } from "@prisma/client";
import {
  DEFAULT_PRODUCT_WEIGHT_GRAMS,
  CDEK_SHIPMENT_POINT,
  CDEK_TARIFF_CODE,
  SENDER_ADDRESS,
  CDEK_API_URLS,
  CDEK_ENDPOINTS,
} from "@/lib/cdek-constants";
import {
  extractProductWeightFromJson,
  extractProductWeight,
  extractProductDimensionsFromJson,
  extractProductDimensions,
} from "@/lib/product-utils";

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ñ–∏—Å–∞ –°–î–≠–ö
interface CdekOffice {
  code: string;
  location: {
    address: string;
    fias_guid?: string;
    longitude?: number;
    latitude?: number;
  };
  type: string;
  work_time?: string;
  phones?: string[];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ñ–∏—Å–æ–≤ –°–î–≠–ö
async function getCdekOffices(cityCode: number): Promise<CdekOffice[]> {
  const token = await fetchCdekToken();
  const response = await fetch(
    `${CDEK_API_URLS.production}/deliverypoints?city_code=${cityCode}&size=1000`,
    {
      headers: { Authorization: `Bearer ${token}` },
    }
  );

  if (!response.ok) {
    throw new Error(`Failed to fetch CDEK offices: ${response.status}`);
  }

  return response.json();
}

// POST - –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ (webhook –¥–ª—è –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã)
export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params;
    const contentType = request.headers.get("content-type");
    let callbackData: Record<string, string> = {};

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
    if (contentType?.includes("application/json")) {
      // JSON –∑–∞–ø—Ä–æ—Å –æ—Ç success —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const jsonData = await request.json();
      console.log("üì• JSON payment data:", jsonData);

      if (jsonData.source === "success_page" && jsonData.transaction_id) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç success —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (jsonData.state !== "COMPLETE") {
          return NextResponse.json(
            { error: "Payment not completed" },
            { status: 400 }
          );
        }
        // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç success —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        callbackData = jsonData;
      } else {
        return NextResponse.json(
          { error: "Invalid payment data" },
          { status: 400 }
        );
      }
    } else {
      // FormData –∑–∞–ø—Ä–æ—Å –æ—Ç Modulbank webhook
      const formData = await request.formData();

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º FormData –≤ –æ–±—ä–µ–∫—Ç
      for (const [key, value] of formData.entries()) {
        callbackData[key] = value.toString();
      }

      console.log("üì• Form payment data:", callbackData);

      // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ callback –æ—Ç Modulbank, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
      if (Object.keys(callbackData).length > 0 && callbackData.signature) {
        const isValidSignature = verifyCallback(callbackData);

        if (!isValidSignature) {
          console.error("Invalid Modulbank callback signature", callbackData);
          return NextResponse.json(
            { error: "Invalid signature" },
            { status: 400 }
          );
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Modulbank
        if (callbackData.state !== "COMPLETE") {
          console.log("Payment not completed", callbackData);
          return NextResponse.json(
            { error: "Payment not completed" },
            { status: 400 }
          );
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const existingOrder = await prisma.order.findUnique({
      where: { id },
      include: {
        items: {
          include: {
            product: {
              include: {
                characteristics: true,
              },
            },
          },
        },
      },
    });

    if (!existingOrder) {
      return NextResponse.json({ error: "Order not found" }, { status: 404 });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
    if (existingOrder.status === "PAID") {
      return NextResponse.json(
        { error: "Order is already paid" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –Ω–µ –æ—Ç–º–µ–Ω–µ–Ω
    if (existingOrder.status === "CANCELLED") {
      return NextResponse.json(
        { error: "Cannot pay for cancelled order" },
        { status: 400 }
      );
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ–ø–ª–∞—á–µ–Ω
    const paidOrder = await prisma.order.update({
      where: { id },
      data: {
        status: "PAID",
        paidAt: new Date(),
      },
      include: {
        items: {
          include: {
            product: {
              include: {
                characteristics: true,
              },
            },
          },
        },
      },
    });

    const transformedOrder = transformOrderFromDB(paidOrder);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    try {
      await sendOrderNotification(transformedOrder, "paid");
      console.log("‚úÖ Telegram notification sent successfully");

      if (
        transformedOrder.deliveryType === "delivery" &&
        transformedOrder.deliveryAddress
      ) {
        console.log("üöö Preparing CDEK order for delivery...");
        const cdekData = await prepareCdekData(paidOrder);
        console.log(
          "üì¶ CDEK data prepared:",
          JSON.stringify(cdekData, null, 2)
        );

        const response = await registerCdekOrder(cdekData);
        console.log("üìã CDEK order registration response:", response);

        if (response.success) {
          console.log("‚úÖ CDEK order registered successfully:", response.order);
        } else {
          console.error("‚ùå Failed to register CDEK order:", response.error);
        }
      } else {
        console.log(
          "‚ÑπÔ∏è Skipping CDEK registration - not a delivery order or missing address"
        );
      }
    } catch (error) {
      console.error(
        "‚ùå Error sending Telegram notification or registering CDEK order:",
        error
      );
      // –ù–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    }

    return NextResponse.json({
      success: true,
      message: "Order paid successfully",
      order: transformedOrder,
    });
  } catch (error) {
    console.error("Error processing payment:", error);
    return NextResponse.json(
      {
        error: "Failed to process payment",
        details: error instanceof Error ? error.message : "Unknown error",
      },
      { status: 500 }
    );
  }
}

interface CdekResponse {
  // Define according to CDEK's API response
  order_id: string;
  // Add other relevant fields
}

interface CdekOrderData {
  recipient: {
    name: string;
    phones: Array<{ number: string }>;
  };
  shipment_point: string;
  delivery_point: string;
  tariff_code: number;
  packages: Array<{
    number: string;
    weight: number;
    items: Array<{
      name: string;
      ware_key: string;
      cost: number;
      weight: number;
      amount: number;
      payment: {
        value: number;
      };
    }>;
  }>;
  delivery_recipient_cost: {
    value: number;
  };
}

export async function registerCdekOrder(
  data: CdekOrderData
): Promise<
  { success: true; order: CdekResponse } | { success: false; error: string }
> {
  const token = await fetchCdekToken();
  try {
    // Determine the environment
    const isProduction = true;
    const url = isProduction
      ? `${CDEK_API_URLS.production}${CDEK_ENDPOINTS.orders}`
      : `${CDEK_API_URLS.test}${CDEK_ENDPOINTS.orders}`;

    console.log("üì§ Sending CDEK order to:", url);
    console.log("üì¶ CDEK order data:", JSON.stringify(data, null, 2));

    // Make the API call
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify(data),
    });

    console.log("üì• CDEK response status:", response.status);
    console.log(
      "üì• CDEK response headers:",
      Object.fromEntries(response.headers.entries())
    );

    const responseText = await response.text();
    console.log("üì• CDEK response body:", responseText);

    if (!response.ok) {
      console.error("‚ùå CDEK API error:", {
        status: response.status,
        statusText: response.statusText,
        body: responseText,
      });
      return {
        success: false,
        error: `CDEK API error: ${response.status} ${response.statusText} - ${responseText}`,
      };
    }

    const responseData = JSON.parse(responseText) as CdekResponse;
    console.log("‚úÖ CDEK order created successfully:", responseData);

    return { success: true, order: responseData };
  } catch (error) {
    // Log error securely
    console.error("CDEK order registration error:", {
      timestamp: new Date().toISOString(),
      errorMessage: error instanceof Error ? error.message : "Unknown error",
    });

    return {
      success: false,
      error: "Unable to process CDEK order registration",
    };
  }
}

export async function calculateDeliveryPrice(cityCode: number, weight: number) {
  const token = await fetchCdekToken();
  const url = `${CDEK_API_URLS.production}${CDEK_ENDPOINTS.calculator}`;
  const data = {
    tariff_code: CDEK_TARIFF_CODE,
    from_location: {
      address: SENDER_ADDRESS,
    },
    to_location: {
      code: cityCode,
    },
    packages: [
      {
        weight: weight,
      },
    ],
  };

  const response = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  });

  const { total_sum } = await response.json();
  return Number(total_sum);
}

export async function prepareCdekData(
  order: PrismaOrder & {
    items: Array<{
      product: {
        id: string;
        name: string;
        characteristics?: string | Array<{ key: string; value: string }>; // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –æ–±—ä–µ–∫—Ç–æ–≤ –∏–ª–∏ JSON —Å—Ç—Ä–æ–∫–æ–π
      };
      quantity: number;
      price: number;
    }>;
  }
) {
  const phoneNumber = order.customerPhone.replace(/\D/g, "").slice(-10);
  console.log("Preparing CDEK data for order:", order);

  // –ü–æ–ª—É—á–∞–µ–º –æ—Ñ–∏—Å—ã –°–î–≠–ö –¥–ª—è –≥–æ—Ä–æ–¥–∞
  const cityCode = Number(order.deliveryAddress);
  console.log("üè™ Getting CDEK offices for city code:", cityCode);

  const offices = await getCdekOffices(cityCode);
  console.log("üè™ Found CDEK offices:", offices.length);

  if (offices.length === 0) {
    throw new Error(`No CDEK offices found for city code: ${cityCode}`);
  }

  // –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –æ—Ñ–∏—Å
  const selectedOffice = offices[0];
  console.log("üè™ Selected office:", {
    code: selectedOffice.code,
    address: selectedOffice.location.address,
    type: selectedOffice.type,
  });

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –°–î–≠–ö —Å —Ä–µ–∞–ª—å–Ω—ã–º –≤–µ—Å–æ–º –∏ –≥–∞–±–∞—Ä–∏—Ç–∞–º–∏
  const cdekItems = order.items.map((item) => {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
    let productWeightGrams = DEFAULT_PRODUCT_WEIGHT_GRAMS;
    let productDimensions = {
      width: 35,
      height: 35,
      length: 35,
    };

    console.log("üîç Debug characteristics:", {
      type: typeof item.product.characteristics,
      isArray: Array.isArray(item.product.characteristics),
      value: item.product.characteristics,
    });

    if (item.product.characteristics) {
      if (typeof item.product.characteristics === "string") {
        // –ï—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ JSON —Å—Ç—Ä–æ–∫–∏
        console.log("üìã Processing as JSON string");
        productWeightGrams = extractProductWeightFromJson(
          item.product.characteristics
        );
        productDimensions = extractProductDimensionsFromJson(
          item.product.characteristics
        );
      } else if (Array.isArray(item.product.characteristics)) {
        // –ï—Å–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ –æ–±—ä–µ–∫—Ç–æ–≤
        console.log("üìã Processing as array");
        productWeightGrams = extractProductWeight(item.product.characteristics);
        productDimensions = extractProductDimensions(
          item.product.characteristics
        );
      } else {
        console.log("‚ö†Ô∏è Unknown characteristics format");
      }
    } else {
      console.log(
        "‚ö†Ô∏è No characteristics found, using default weight and dimensions"
      );
    }

    console.log(
      `üì¶ Product ${item.product.name}: weight = ${productWeightGrams}g, dimensions = ${productDimensions.width}x${productDimensions.height}x${productDimensions.length}cm`
    );

    // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è dev —Ä–µ–∂–∏–º–∞
    const isDev = process.env.NODE_ENV === "development";
    const wareKey = isDev
      ? `${item.product.id}_${new Date().toISOString().replace(/[:.]/g, "-")}`
      : item.product.id;

    return {
      name: item.product.name,
      ware_key: wareKey, // –ê—Ä—Ç–∏–∫—É–ª —Å –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º –≤ dev —Ä–µ–∂–∏–º–µ
      cost: Math.max(item.price, 1), // –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞
      weight: productWeightGrams, // –†–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –°–î–≠–ö API
      amount: Math.max(item.quantity, 1), // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      payment: {
        value: 0, // –¢–æ–≤–∞—Ä –æ–ø–ª–∞—á–µ–Ω, –¥–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
      },
    };
  });

  // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ –≥–∞–±–∞—Ä–∏—Ç—ã —É–ø–∞–∫–æ–≤–∫–∏ (–±–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã)
  const maxDimensions = order.items.reduce(
    (max, item) => {
      const itemDimensions = item.product.characteristics
        ? typeof item.product.characteristics === "string"
          ? extractProductDimensionsFromJson(item.product.characteristics)
          : extractProductDimensions(item.product.characteristics)
        : { width: 35, height: 35, length: 35 };

      return {
        width: Math.max(max.width, itemDimensions.width),
        height: Math.max(max.height, itemDimensions.height),
        length: Math.max(max.length, itemDimensions.length),
      };
    },
    { width: 35, height: 35, length: 35 }
  );

  console.log(
    `üì¶ Package dimensions: ${maxDimensions.width}x${maxDimensions.height}x${maxDimensions.length}cm`
  );

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å –∑–∞–∫–∞–∑–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
  const totalWeightGrams = cdekItems.reduce((weight: number, item) => {
    return weight + item.weight * item.amount; // –í–µ—Å —É–∂–µ –≤ –≥—Ä–∞–º–º–∞—Ö
  }, 0);

  console.log(`üì¶ Total order weight: ${totalWeightGrams}g`);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞)
  const deliveryPrice = await calculateDeliveryPrice(
    cityCode,
    totalWeightGrams
  );

  return {
    recipient: {
      name: order.customerName,
      phones: [{ number: "+7" + phoneNumber }],
    },
    shipment_point: CDEK_SHIPMENT_POINT, // –ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    delivery_point: selectedOffice.code, // –ö–æ–¥ –æ—Ñ–∏—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
    tariff_code: CDEK_TARIFF_CODE, // –ö–æ–¥ —Ç–∞—Ä–∏—Ñ–∞ –°–î–≠–ö
    packages: [
      {
        number: order.orderNumber, // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        weight: totalWeightGrams, // –û–±—â–∏–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –°–î–≠–ö API
        length: maxDimensions.length, // –î–ª–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏ –≤ —Å–º
        width: maxDimensions.width, // –®–∏—Ä–∏–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∏ –≤ —Å–º
        height: maxDimensions.height, // –í—ã—Å–æ—Ç–∞ —É–ø–∞–∫–æ–≤–∫–∏ –≤ —Å–º
        items: cdekItems,
      },
    ],
    delivery_recipient_cost: {
      value: deliveryPrice, // –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    },
  };
}
