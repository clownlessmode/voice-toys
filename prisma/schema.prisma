generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Product {
  id                String            @id @default(cuid())
  name              String
  breadcrumbs       String            // JSON string
  images            String            // JSON string array
  price             Float
  oldPrice          Float?
  discountPercent   Int?
  currency          String            @default("₽")
  favorite          Boolean           @default(false)
  pickupAvailability String
  deliveryAvailability String
  returnDays        Int               @default(14)
  returnDetails     String
  description       String
  videoUrl          String?           // ссылка на видео (опционально)
  characteristics   ProductCharacteristic[]
  orderItems        OrderItem[]
  categories        String            // JSON array of category strings
  ageGroups         String            // JSON array of age group strings
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("products")
}

model ProductCharacteristic {
  id        String  @id @default(cuid())
  productId String
  key       String
  value     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_characteristics")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique // Номер заказа для клиента (например, #2024-001)
  status      OrderStatus @default(CREATED)
  
  // Данные покупателя
  customerName  String
  customerPhone String
  customerEmail String?
  
  // Доставка
  deliveryType    String // "pickup" или "delivery"
  deliveryAddress String?
  
  // Сумма заказа
  totalAmount   Float
  currency      String  @default("₽")
  
  // Промокод
  promoCodeId   String?  // ID использованного промокода
  promoCode     PromoCode? @relation(fields: [promoCodeId], references: [id])
  discountAmount Float?   // Сумма скидки по промокоду
  originalAmount Float?   // Исходная сумма заказа
  
  // Товары в заказе
  items         OrderItem[]
  
  // Даты
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paidAt        DateTime?
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Float   // Цена на момент заказа
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  CREATED    // Создан
  PAID       // Оплачен
  SHIPPED    // Отправлен
  DELIVERED  // Доставлен
  CANCELLED  // Отменен
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique // Уникальный код промокода
  name        String   // Название промокода
  description String?  // Описание
  type        PromoCodeType // Тип промокода
  value       Float    // Значение (процент или сумма в рублях)
  minOrderAmount Float?  // Минимальная сумма заказа для применения
  maxUses     Int?     // Максимальное количество использований
  currentUses Int      @default(0) // Текущее количество использований
  validFrom   DateTime @default(now()) // Дата начала действия
  validUntil  DateTime // Дата окончания действия
  isActive    Boolean  @default(true) // Активен ли промокод
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  orders     Order[]  // Заказы, где использовался промокод

  @@map("promo_codes")
}

enum PromoCodeType {
  PERCENTAGE // Скидка в процентах
  FIXED_AMOUNT // Скидка в рублях
}