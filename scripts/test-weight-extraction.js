const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Å–∞ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ product-utils.ts)
function extractProductWeight(characteristics) {
  if (!characteristics || !Array.isArray(characteristics)) {
    return 500; // DEFAULT_PRODUCT_WEIGHT_GRAMS
  }

  console.log("üîç Input characteristics:", characteristics);

  // –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Å –∫–ª—é—á–æ–º "–í–µ—Å"
  const weightChar = characteristics.find(
    (char) =>
      char.key.toLowerCase().includes("–≤–µ—Å") ||
      char.key.toLowerCase().includes("weight")
  );

  console.log("üîç Found weight characteristic:", weightChar);

  if (!weightChar) {
    console.log("‚ö†Ô∏è No weight characteristic found");
    return 500;
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
  const weightText = weightChar.value;
  const weightMatch = weightText.match(/(\d+(?:\.\d+)?)/);

  console.log("üîç Weight text:", weightText);
  console.log("üîç Weight match:", weightMatch);

  if (!weightMatch) {
    console.log("‚ö†Ô∏è No numeric value found in weight text");
    return 500;
  }

  let weight = parseFloat(weightMatch[1]);
  console.log("üîç Parsed weight:", weight);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–º–º—ã
  if (
    weightText.toLowerCase().includes("–∫–≥") ||
    weightText.toLowerCase().includes("kg")
  ) {
    weight *= 1000; // –∫–≥ –≤ –≥—Ä–∞–º–º—ã
    console.log("üîç Converted kg to grams:", weight);
  } else if (
    weightText.toLowerCase().includes("–≥—Ä") ||
    weightText.toLowerCase().includes("–≥")
  ) {
    console.log("üîç Already in grams");
  } else {
    console.log("üîç Assuming grams by default");
  }

  console.log(`üîç Final weight: ${weight}g`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (–æ—Ç 1 –¥–æ 100 –∫–≥)
  if (weight < 1 || weight > 100000) {
    console.log("‚ö†Ô∏è Weight out of reasonable range, using default");
    return 500;
  }

  return Math.round(weight);
}

async function testWeightExtraction() {
  try {
    console.log("üîç Testing weight extraction...");

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç
    const latestProduct = await prisma.product.findFirst({
      orderBy: { createdAt: "desc" },
      include: { characteristics: true },
    });

    if (!latestProduct) {
      console.log("‚ùå No products found");
      return;
    }

    console.log("üì¶ Product:", latestProduct.name);
    console.log("üìã Characteristics:", latestProduct.characteristics);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–µ—Å–∞
    const weight = extractProductWeight(latestProduct.characteristics);
    console.log(`‚úÖ Extracted weight: ${weight}g`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
    if (weight === 750) {
      console.log("‚úÖ Weight extraction is working correctly!");
    } else {
      console.log("‚ùå Weight extraction is NOT working correctly!");
      console.log("Expected: 750g, Got:", weight + "g");
    }
  } catch (error) {
    console.error("‚ùå Error:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testWeightExtraction();
