const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–µ—Å–∞ –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
function extractProductWeightFromJson(characteristicsJson) {
  try {
    const characteristics = JSON.parse(characteristicsJson);

    if (!characteristics || !Array.isArray(characteristics)) {
      return 500; // DEFAULT_PRODUCT_WEIGHT_GRAMS
    }

    // –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Å –∫–ª—é—á–æ–º "–í–µ—Å"
    const weightChar = characteristics.find(
      (char) =>
        char.key.toLowerCase().includes("–≤–µ—Å") ||
        char.key.toLowerCase().includes("weight")
    );

    if (!weightChar) {
      return 500; // DEFAULT_PRODUCT_WEIGHT_GRAMS
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const weightText = weightChar.value;
    const weightMatch = weightText.match(/(\d+(?:\.\d+)?)/);

    if (!weightMatch) {
      return 500; // DEFAULT_PRODUCT_WEIGHT_GRAMS
    }

    let weight = parseFloat(weightMatch[1]);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≥—Ä–∞–º–º—ã
    if (
      weightText.toLowerCase().includes("–∫–≥") ||
      weightText.toLowerCase().includes("kg")
    ) {
      weight *= 1000; // –∫–≥ –≤ –≥—Ä–∞–º–º—ã
    } else if (
      weightText.toLowerCase().includes("–≥—Ä") ||
      weightText.toLowerCase().includes("–≥")
    ) {
      // —É–∂–µ –≤ –≥—Ä–∞–º–º–∞—Ö
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ –≥—Ä–∞–º–º—ã
    }

    console.log(`üîç Weight extraction: "${weightText}" ‚Üí ${weight}g`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Å –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (–æ—Ç 1 –¥–æ 100 –∫–≥)
    if (weight < 1 || weight > 100000) {
      return 500; // DEFAULT_PRODUCT_WEIGHT_GRAMS
    }

    return Math.round(weight);
  } catch (error) {
    console.warn("Failed to parse product characteristics JSON:", error);
    return 500; // DEFAULT_PRODUCT_WEIGHT_GRAMS
  }
}

async function debugLatestOrder() {
  try {
    console.log("üöÄ Debugging latest test order...");

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–æ–∑–¥–∞–Ω–Ω—ã–π –∑–∞–∫–∞–∑
    const order = await prisma.order.findFirst({
      where: {
        orderNumber: {
          startsWith: "SINGLE-TEST",
        },
      },
      include: {
        items: {
          include: {
            product: {
              include: {
                characteristics: true,
              },
            },
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    if (!order) {
      console.log("‚ùå No test order found");
      return;
    }

    console.log("üìã Found order:", order.orderNumber);
    console.log("üìä Order details:");
    console.log(`   - Status: ${order.status}`);
    console.log(`   - Items count: ${order.items.length}`);
    console.log(`   - First item quantity: ${order.items[0].quantity}`);
    console.log(
      `   - Product characteristics:`,
      order.items[0].product.characteristics
    );

    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –°–î–≠–ö —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –Ω–∞—à–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –∫–æ–¥–µ
    console.log("\nüîß Simulating CDEK data preparation (with our fixes)...");

    const cdekItems = order.items.map((item) => {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Å –∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
      const productWeightGrams = item.product.characteristics
        ? extractProductWeightFromJson(
            JSON.stringify(item.product.characteristics)
          )
        : 500;

      console.log(
        `üì¶ Product ${item.product.name}: weight = ${productWeightGrams}g`
      );

      return {
        name: item.product.name,
        ware_key: item.product.id,
        cost: Math.max(item.price, 1),
        weight: productWeightGrams, // –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –°–î–≠–ö API
        amount: Math.max(item.quantity, 1),
        payment: {
          value: 0,
        },
      };
    });

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π –≤–µ—Å –∑–∞–∫–∞–∑–∞ (–≤ –≥—Ä–∞–º–º–∞—Ö)
    const totalWeightGrams = cdekItems.reduce((weight, item) => {
      return weight + item.weight * item.amount; // –í–µ—Å —É–∂–µ –≤ –≥—Ä–∞–º–º–∞—Ö
    }, 0);

    console.log(`üì¶ Total order weight: ${totalWeightGrams}g`);

    const cdekData = {
      recipient: {
        name: order.customerName,
        phones: [
          { number: "+7" + order.customerPhone.replace(/\D/g, "").slice(-10) },
        ],
      },
      shipment_point: "MSK124",
      delivery_point: "44-1", // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥ –æ—Ñ–∏—Å–∞
      tariff_code: 136,
      packages: [
        {
          number: order.orderNumber,
          weight: totalWeightGrams, // –û–±—â–∏–π –≤–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö –¥–ª—è –°–î–≠–ö API
          items: cdekItems,
        },
      ],
    };

    console.log("\nüì§ Expected CDEK data (with our fixes):");
    console.log(JSON.stringify(cdekData, null, 2));

    console.log("\nüéØ Expected results:");
    console.log(`   - Product weight in CDEK: ${cdekItems[0].weight} grams`);
    console.log(`   - Total weight in CDEK: ${totalWeightGrams} grams`);
    console.log(`   - Quantity: ${cdekItems[0].amount}`);

    console.log("\nüîç If you see 0.001 kg in CDEK, it means:");
    console.log("   1. The server is not using our updated code");
    console.log("   2. Or there's an issue with the weight calculation");
    console.log("   3. Or the CDEK API is interpreting the data differently");

    console.log("\nüí° To fix this:");
    console.log("   1. Restart the development server (npm run dev)");
    console.log("   2. Check if the server logs show our weight calculations");
    console.log("   3. Verify that the CDEK API receives the correct weight");
  } catch (error) {
    console.error("‚ùå Debug failed:", error);
  } finally {
    await prisma.$disconnect();
  }
}

debugLatestOrder()
  .then(() => {
    console.log("‚úÖ Debug completed!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Debug failed:", error);
    process.exit(1);
  });
