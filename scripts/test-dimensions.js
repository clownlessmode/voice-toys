const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–∞–±–∞—Ä–∏—Ç–æ–≤ (—Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ product-utils.ts)
function extractProductDimensions(characteristics) {
  if (!characteristics || !Array.isArray(characteristics)) {
    return {
      width: 35,
      height: 35,
      length: 35,
    };
  }

  const dimensions = {
    width: 35,
    height: 35,
    length: 35,
  };

  // –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –∫–ª—é—á–∞–º–∏ "–®–∏—Ä–∏–Ω–∞", "–í—ã—Å–æ—Ç–∞", "–î–ª–∏–Ω–∞"
  const widthChar = characteristics.find(
    (char) =>
      char.key.toLowerCase().includes("—à–∏—Ä–∏–Ω–∞") ||
      char.key.toLowerCase().includes("width")
  );

  const heightChar = characteristics.find(
    (char) =>
      char.key.toLowerCase().includes("–≤—ã—Å–æ—Ç–∞") ||
      char.key.toLowerCase().includes("height")
  );

  const lengthChar = characteristics.find(
    (char) =>
      char.key.toLowerCase().includes("–¥–ª–∏–Ω–∞") ||
      char.key.toLowerCase().includes("length")
  );

  // –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
  if (widthChar) {
    const widthMatch = widthChar.value.match(/(\d+(?:\.\d+)?)/);
    if (widthMatch) {
      dimensions.width = parseFloat(widthMatch[1]);
      console.log(
        `üìè Width extraction: "${widthChar.value}" ‚Üí ${dimensions.width}cm`
      );
    }
  }

  if (heightChar) {
    const heightMatch = heightChar.value.match(/(\d+(?:\.\d+)?)/);
    if (heightMatch) {
      dimensions.height = parseFloat(heightMatch[1]);
      console.log(
        `üìè Height extraction: "${heightChar.value}" ‚Üí ${dimensions.height}cm`
      );
    }
  }

  if (lengthChar) {
    const lengthMatch = lengthChar.value.match(/(\d+(?:\.\d+)?)/);
    if (lengthMatch) {
      dimensions.length = parseFloat(lengthMatch[1]);
      console.log(
        `üìè Length extraction: "${lengthChar.value}" ‚Üí ${dimensions.length}cm`
      );
    }
  }

  return dimensions;
}

async function testDimensions() {
  try {
    console.log("üîç Testing dimensions extraction...");

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –≥–∞–±–∞—Ä–∏—Ç–∞–º–∏
    const product = await prisma.product.create({
      data: {
        name: "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ —Å –≥–∞–±–∞—Ä–∏—Ç–∞–º–∏",
        breadcrumbs: JSON.stringify(["–ò–≥—Ä—É—à–∫–∏", "–¢–µ—Å—Ç–æ–≤—ã–µ"]),
        images: JSON.stringify(["test-image.jpg"]),
        price: 1500,
        oldPrice: 2000,
        discountPercent: 25,
        currency: "‚ÇΩ",
        favorite: false,
        pickupAvailability: "–í –Ω–∞–ª–∏—á–∏–∏",
        deliveryAvailability: "–î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
        returnDays: 14,
        returnDetails: "–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
        description: "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≥–∞–±–∞—Ä–∏—Ç–æ–≤",
        categories: JSON.stringify(["test"]),
        ageGroups: JSON.stringify(["3-6"]),
        characteristics: {
          create: [
            {
              key: "–í–µ—Å",
              value: "800 –≥—Ä",
            },
            {
              key: "–®–∏—Ä–∏–Ω–∞",
              value: "25 —Å–º",
            },
            {
              key: "–í—ã—Å–æ—Ç–∞",
              value: "30 —Å–º",
            },
            {
              key: "–î–ª–∏–Ω–∞",
              value: "40 —Å–º",
            },
            {
              key: "–ú–∞—Ç–µ—Ä–∏–∞–ª",
              value: "–ü–ª–∞—Å—Ç–∏–∫",
            },
          ],
        },
      },
      include: {
        characteristics: true,
      },
    });

    console.log("‚úÖ Product created:", product.id);
    console.log("üìã Characteristics:", product.characteristics);

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≥–∞–±–∞—Ä–∏—Ç–æ–≤
    const dimensions = extractProductDimensions(product.characteristics);
    console.log(
      `‚úÖ Extracted dimensions: ${dimensions.width}x${dimensions.height}x${dimensions.length}cm`
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–∞–±–∞—Ä–∏—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
    if (
      dimensions.width === 25 &&
      dimensions.height === 30 &&
      dimensions.length === 40
    ) {
      console.log("‚úÖ Dimensions extraction is working correctly!");
    } else {
      console.log("‚ùå Dimensions extraction is NOT working correctly!");
      console.log(
        "Expected: 25x30x40cm, Got:",
        `${dimensions.width}x${dimensions.height}x${dimensions.length}cm`
      );
    }
  } catch (error) {
    console.error("‚ùå Error:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testDimensions();
