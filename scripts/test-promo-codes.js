const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function testPromoCodes() {
  try {
    console.log("üöÄ Testing promo codes system...");
    
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã
    console.log("üì¶ Creating test promo codes...");
    
    const promoCode1 = await prisma.promoCode.create({
      data: {
        code: "WELCOME20",
        name: "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å",
        description: "–°–∫–∏–¥–∫–∞ 20% –¥–ª—è –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
        type: "PERCENTAGE",
        value: 20,
        minOrderAmount: 1000,
        maxUses: 100,
        validFrom: new Date(),
        validUntil: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000), // +90 –¥–Ω–µ–π
        isActive: true,
      },
    });

    const promoCode2 = await prisma.promoCode.create({
      data: {
        code: "SAVE500",
        name: "–≠–∫–æ–Ω–æ–º–∏—è 500‚ÇΩ",
        description: "–°–∫–∏–¥–∫–∞ 500 —Ä—É–±–ª–µ–π –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç 2000‚ÇΩ",
        type: "FIXED_AMOUNT",
        value: 500,
        minOrderAmount: 2000,
        maxUses: 50,
        validFrom: new Date(),
        validUntil: new Date(Date.now() + 60 * 24 * 60 * 60 * 1000), // +60 –¥–Ω–µ–π
        isActive: true,
      },
    });

    console.log("‚úÖ Promo codes created:");
    console.log("   - WELCOME20: 20% —Å–∫–∏–¥–∫–∞");
    console.log("   - SAVE500: 500‚ÇΩ —Å–∫–∏–¥–∫–∞");

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    console.log("\nüîç Testing promo code validation...");
    
    const testCases = [
      { code: "WELCOME20", orderAmount: 1500 },
      { code: "SAVE500", orderAmount: 2500 },
      { code: "INVALID", orderAmount: 1000 },
      { code: "WELCOME20", orderAmount: 500 }, // –ú–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
    ];

    for (const testCase of testCases) {
      console.log(`\nüìã Testing: ${testCase.code} with order amount ${testCase.orderAmount}‚ÇΩ`);
      
      try {
        const response = await fetch("http://localhost:3000/api/promo-codes/validate", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(testCase),
        });

        if (response.ok) {
          const result = await response.json();
          if (result.isValid) {
            console.log(`‚úÖ Valid: ${result.discountAmount}‚ÇΩ discount`);
          } else {
            console.log(`‚ùå Invalid: ${result.error}`);
          }
        } else {
          console.log(`‚ùå API Error: ${response.status}`);
        }
      } catch (error) {
        console.log(`‚ùå Request failed: ${error.message}`);
      }
    }

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    console.log("\nüìã Creating test order with promo code...");
    
    const product = await prisma.product.findFirst();
    if (!product) {
      console.log("‚ùå No products found, creating one...");
      await prisma.product.create({
        data: {
          name: "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞",
          breadcrumbs: JSON.stringify(["–¢–µ—Å—Ç"]),
          images: JSON.stringify(["test.jpg"]),
          price: 1500,
          pickupAvailability: "–í –Ω–∞–ª–∏—á–∏–∏",
          deliveryAvailability: "–î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
          returnDays: 14,
          returnDetails: "–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
          description: "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç",
          categories: JSON.stringify(["test"]),
          ageGroups: JSON.stringify(["3-6"]),
        },
      });
    }

    const order = await prisma.order.create({
      data: {
        orderNumber: `PROMO-TEST-${Date.now()}`,
        status: "CREATED",
        customerName: "–¢–µ—Å—Ç –ü—Ä–æ–º–æ–∫–æ–¥–∞",
        customerPhone: "+7 (999) 123-45-67",
        customerEmail: "test-promo@example.com",
        deliveryType: "delivery",
        deliveryAddress: "44",
        totalAmount: 1500,
        originalAmount: 1500,
        discountAmount: 300, // 20% –æ—Ç 1500
        promoCodeId: promoCode1.id,
        currency: "‚ÇΩ",
        items: {
          create: [
            {
              productId: product.id,
              quantity: 1,
              price: 1500,
            },
          ],
        },
      },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });

    console.log("‚úÖ Order created:", order.orderNumber);
    console.log("   - Original amount:", order.originalAmount);
    console.log("   - Discount amount:", order.discountAmount);
    console.log("   - Final amount:", order.totalAmount);
    console.log("   - Promo code ID:", order.promoCodeId);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –ø—Ä–æ–º–æ–∫–æ–¥–∞
    const updatedPromoCode = await prisma.promoCode.findUnique({
      where: { id: promoCode1.id },
    });

    console.log("\nüìä Promo code usage stats:");
    console.log(`   - WELCOME20: ${updatedPromoCode.currentUses} / ${updatedPromoCode.maxUses} uses`);

    console.log("\nüéØ System is ready! You can now:");
    console.log("   1. Go to /admin/promo-codes to manage promo codes");
    console.log("   2. Use promo codes in the checkout form");
    console.log("   3. Track usage statistics");

  } catch (error) {
    console.error("‚ùå Test failed:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testPromoCodes();
