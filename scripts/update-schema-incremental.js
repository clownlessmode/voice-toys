#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã Prisma
 * –ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BACKUP_DIR = './backups';
const SCHEMA_FILE = './prisma/schema.prisma';

// –ù–æ–≤–∞—è —Å—Ö–µ–º–∞ (–∏–∑ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
const NEW_SCHEMA_CONTENT = `generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Product {
  id                String            @id @default(cuid())
  name              String
  breadcrumbs       String            // JSON string
  images            String            // JSON string array
  price             Float
  oldPrice          Float?
  discountPercent   Int?
  currency          String            @default("‚ÇΩ")
  favorite          Boolean           @default(false)
  pickupAvailability String
  deliveryAvailability String
  returnDays        Int               @default(14)
  returnDetails     String
  description       String
  videoUrl          String?           // —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  characteristics   ProductCharacteristic[]
  orderItems        OrderItem[]
  categories        String            // JSON array of category strings
  ageGroups         String            // JSON array of age group strings
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@map("products")
}

model ProductCharacteristic {
  id        String  @id @default(cuid())
  productId String
  key       String
  value     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_characteristics")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, #2024-001)
  status      OrderStatus @default(CREATED)
  
  // –î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
  customerName  String
  customerPhone String
  customerEmail String?
  
  // –î–æ—Å—Ç–∞–≤–∫–∞
  deliveryType    String // "pickup" –∏–ª–∏ "delivery"
  deliveryAddress String?
  
  // –°—É–º–º–∞ –∑–∞–∫–∞–∑–∞
  totalAmount   Float
  currency      String  @default("‚ÇΩ")
  
  // –ü—Ä–æ–º–æ–∫–æ–¥
  promoCodeId   String?  // ID –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  promoCode     PromoCode? @relation(fields: [promoCodeId], references: [id])
  discountAmount Float?   // –°—É–º–º–∞ —Å–∫–∏–¥–∫–∏ –ø–æ –ø—Ä–æ–º–æ–∫–æ–¥—É
  originalAmount Float?   // –ò—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞
  
  // –¢–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ
  items         OrderItem[]
  
  // –î–∞—Ç—ã
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  paidAt        DateTime?
  
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int     @default(1)
  price     Float   // –¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
  
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

enum OrderStatus {
  CREATED    // –°–æ–∑–¥–∞–Ω
  PAID       // –û–ø–ª–∞—á–µ–Ω
  SHIPPED    // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω
  DELIVERED  // –î–æ—Å—Ç–∞–≤–ª–µ–Ω
  CANCELLED  // –û—Ç–º–µ–Ω–µ–Ω
}

model PromoCode {
  id          String   @id @default(cuid())
  code        String   @unique // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  name        String   // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
  description String?  // –û–ø–∏—Å–∞–Ω–∏–µ
  type        PromoCodeType // –¢–∏–ø –ø—Ä–æ–º–æ–∫–æ–¥–∞
  value       Float    // –ó–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä–æ—Ü–µ–Ω—Ç –∏–ª–∏ —Å—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö)
  minOrderAmount Float?  // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  maxUses     Int?     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  currentUses Int      @default(0) // –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
  validFrom   DateTime @default(now()) // –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è
  validUntil  DateTime // –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
  isActive    Boolean  @default(true) // –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // –°–≤—è–∑–∏
  orders     Order[]  // –ó–∞–∫–∞–∑—ã, –≥–¥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ø—Ä–æ–º–æ–∫–æ–¥

  @@map("promo_codes")
}

enum PromoCodeType {
  PERCENTAGE // –°–∫–∏–¥–∫–∞ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
  FIXED_AMOUNT // –°–∫–∏–¥–∫–∞ –≤ —Ä—É–±–ª—è—Ö
}`;

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const prefix = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è';
  console.log(`${prefix} [${timestamp}] ${message}`);
}

function runCommand(command, description) {
  try {
    log(`–í—ã–ø–æ–ª–Ω—è—é: ${description}`);
    execSync(command, { stdio: 'inherit' });
    log(`${description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 'success');
    return true;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`, 'error');
    return false;
  }
}

function createBackup() {
  if (!fs.existsSync(BACKUP_DIR)) {
    fs.mkdirSync(BACKUP_DIR, { recursive: true });
  }

  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const backupFile = path.join(BACKUP_DIR, `schema-backup-${timestamp}.prisma`);
  
  log(`–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—Ö–µ–º—ã: ${backupFile}`);
  fs.copyFileSync(SCHEMA_FILE, backupFile);
  
  // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  const dbBackupFile = path.join(BACKUP_DIR, `dev-backup-${timestamp}.db`);
  if (fs.existsSync('./dev.db')) {
    log(`–°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbBackupFile}`);
    fs.copyFileSync('./dev.db', dbBackupFile);
  }
  
  return backupFile;
}

function updateSchema() {
  log('–û–±–Ω–æ–≤–ª—è—é —Å—Ö–µ–º—É Prisma');
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º—ã
  const backupFile = createBackup();
  
  // –ó–∞–º–µ–Ω—è–µ–º —Å—Ö–µ–º—É
  fs.writeFileSync(SCHEMA_FILE, NEW_SCHEMA_CONTENT);
  
  log(`–°—Ö–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${backupFile}`);
}

function tryIncrementalMigration() {
  log('–ü—ã—Ç–∞—é—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é');
  
  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é
    if (runCommand('npx prisma migrate dev --name update-schema --create-only', '–°–æ–∑–¥–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏')) {
      log('–ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ. –ü—Ä–æ–≤–µ—Ä—è—é –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–ª–∞—Å—å
      const migrationsDir = './prisma/migrations';
      if (fs.existsSync(migrationsDir)) {
        const migrations = fs.readdirSync(migrationsDir)
          .filter(dir => dir.includes('update-schema'))
          .sort()
          .reverse();
        
        if (migrations.length > 0) {
          const latestMigration = migrations[0];
          const migrationFile = path.join(migrationsDir, latestMigration, 'migration.sql');
          
          if (fs.existsSync(migrationFile)) {
            const migrationContent = fs.readFileSync(migrationFile, 'utf8');
            log(`–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–∏:\n${migrationContent}`);
            
            // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏
            const readline = require('readline');
            const rl = readline.createInterface({
              input: process.stdin,
              output: process.stdout
            });
            
            rl.question('–ü—Ä–∏–º–µ–Ω–∏—Ç—å —ç—Ç—É –º–∏–≥—Ä–∞—Ü–∏—é? (yes/no): ', (answer) => {
              if (answer.toLowerCase() === 'yes') {
                rl.close();
                
                if (runCommand('npx prisma migrate deploy', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏')) {
                  log('–ú–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
                  
                  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
                  if (runCommand('npx prisma generate', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞')) {
                    log('üéâ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö!', 'success');
                  }
                } else {
                  log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é', 'error');
                  log('üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä—É—á–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –∏–ª–∏ —Å–±—Ä–æ—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                }
              } else {
                log('‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º', 'warning');
                rl.close();
              }
            });
          }
        }
      }
    } else {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é', 'error');
      return false;
    }
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏: ${error.message}`, 'error');
    return false;
  }
}

function main() {
  try {
    log('üöÄ –ù–∞—á–∏–Ω–∞—é –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Prisma');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if (!fs.existsSync(SCHEMA_FILE)) {
      throw new Error('–§–∞–π–ª —Å—Ö–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞.');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Prisma —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    try {
      execSync('npx prisma --version', { stdio: 'ignore' });
    } catch {
      throw new Error('Prisma CLI –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ: npm install -g prisma');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É
    updateSchema();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    if (!tryIncrementalMigration()) {
      log('‚ö†Ô∏è  –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å', 'warning');
      log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å: npm run update-schema-safely');
    }
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    log('üîÑ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å—Ö–µ–º—É –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    try {
      const backups = fs.readdirSync(BACKUP_DIR)
        .filter(file => file.endsWith('.prisma'))
        .sort()
        .reverse();
      
      if (backups.length > 0) {
        const latestBackup = path.join(BACKUP_DIR, backups[0]);
        fs.copyFileSync(latestBackup, SCHEMA_FILE);
        log(`‚úÖ –°—Ö–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${latestBackup}`, 'success');
      }
    } catch (restoreError) {
      log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ö–µ–º—É: ${restoreError.message}`, 'error');
    }
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, createBackup, updateSchema, tryIncrementalMigration };
