const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function testExistingOrderCdek() {
  try {
    console.log("üöÄ Testing existing order with CDEK delivery...");

    // 1. –ù–∞—Ö–æ–¥–∏–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    let order = await prisma.order.findFirst({
      where: { status: "CREATED" },
      orderBy: { createdAt: "desc" },
      include: {
        items: {
          include: {
            product: {
              include: {
                characteristics: true,
              },
            },
          },
        },
      },
    });

    if (!order) {
      console.log("üìã No unpaid orders found, creating new test order...");

      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç —Å –≤–µ—Å–æ–º
      const product = await prisma.product.create({
        data: {
          name: "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ –¥–ª—è –°–î–≠–ö 750–≥",
          breadcrumbs: JSON.stringify(["–ò–≥—Ä—É—à–∫–∏", "–¢–µ—Å—Ç–æ–≤—ã–µ"]),
          images: JSON.stringify(["test-image.jpg"]),
          price: 1000,
          oldPrice: 1200,
          discountPercent: 17,
          currency: "‚ÇΩ",
          favorite: false,
          pickupAvailability: "–í –Ω–∞–ª–∏—á–∏–∏",
          deliveryAvailability: "–î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
          returnDays: 14,
          returnDetails: "–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
          description: "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –°–î–≠–ö",
          categories: JSON.stringify(["test"]),
          ageGroups: JSON.stringify(["3-6"]),
          characteristics: {
            create: [
              {
                key: "–í–µ—Å",
                value: "750 –≥—Ä",
              },
              {
                key: "–ú–∞—Ç–µ—Ä–∏–∞–ª",
                value: "–ü–ª–∞—Å—Ç–∏–∫",
              },
            ],
          },
        },
        include: {
          characteristics: true,
        },
      });

      console.log("‚úÖ Product created:", product.id);

      // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
      order = await prisma.order.create({
        data: {
          orderNumber: `CDEK-TEST-${Date.now()}`,
          status: "CREATED",
          customerName: "–¢–µ—Å—Ç –°–î–≠–ö",
          customerPhone: "+7 (999) 123-45-67",
          customerEmail: "test-cdek@example.com",
          deliveryType: "delivery",
          deliveryAddress: "44", // –ö–æ–¥ –ú–æ—Å–∫–≤—ã
          totalAmount: 2000,
          currency: "‚ÇΩ",
          items: {
            create: [
              {
                productId: product.id,
                quantity: 2,
                price: 1000,
              },
            ],
          },
        },
        include: {
          items: {
            include: {
              product: {
                include: {
                  characteristics: true,
                },
              },
            },
          },
        },
      });

      console.log("‚úÖ Order created:", order.orderNumber);
    } else {
      console.log("üìã Found unpaid order:", order.orderNumber);
    }

    console.log("üìä Current status:", order.status);
    console.log("üì¶ Items count:", order.items.length);

    if (order.items.length > 0) {
      const firstItem = order.items[0];
      console.log("üì¶ First item:", {
        product: firstItem.product.name,
        quantity: firstItem.quantity,
        price: firstItem.price,
        characteristics: firstItem.product.characteristics,
      });
    }

    // 2. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏ –°–î–≠–ö
    if (order.deliveryType !== "delivery") {
      console.log("üîÑ Changing delivery type to CDEK...");
      await prisma.order.update({
        where: { id: order.id },
        data: { deliveryType: "delivery" },
      });
      console.log("‚úÖ Delivery type changed to CDEK");
    } else {
      console.log("‚úÖ Delivery type already set to CDEK");
    }

    // 3. –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –ú–æ—Å–∫–≤–∞
    if (order.deliveryAddress !== "44") {
      console.log("üè™ Setting delivery address to Moscow (44)...");
      await prisma.order.update({
        where: { id: order.id },
        data: { deliveryAddress: "44" },
      });
      console.log("‚úÖ Delivery address set to Moscow (44)");
    } else {
      console.log("‚úÖ Delivery address already set to Moscow (44)");
    }

    // 4. –û–ø–ª–∞—á–∏–≤–∞–µ–º –∑–∞–∫–∞–∑
    console.log("üí≥ Paying order...");
    const paymentResponse = await fetch(
      `http://localhost:3000/api/orders/${order.id}/pay`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          source: "success_page",
          transaction_id: `test-existing-cdek-${Date.now()}`,
          state: "COMPLETE",
        }),
      }
    );

    if (!paymentResponse.ok) {
      const errorText = await paymentResponse.text();
      throw new Error(
        `Payment failed: ${paymentResponse.status} ${paymentResponse.statusText} - ${errorText}`
      );
    }

    const paymentResult = await paymentResponse.json();
    console.log("‚úÖ Payment successful!");

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalOrder = await prisma.order.findUnique({
      where: { id: order.id },
    });

    console.log("üìä Final order status:", finalOrder.status);
    console.log("üìä Paid at:", finalOrder.paidAt);
    console.log("üéØ Order number for CDEK check:", finalOrder.orderNumber);

    console.log(
      "\nüéØ Now check your CDEK dashboard for order:",
      finalOrder.orderNumber
    );
    console.log("Expected data in CDEK:");
    console.log("   - Product weight: 750 grams");
    console.log("   - Total weight: 1500 grams (750g √ó 2 items)");
    console.log("   - Quantity: 2 items");
    console.log("   - Article: should include timestamp in dev mode");
  } catch (error) {
    console.error("‚ùå Test failed:", error);
  } finally {
    await prisma.$disconnect();
  }
}

testExistingOrderCdek();
