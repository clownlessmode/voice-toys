#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–∞–ø–∫–∏ prisma-backup
 * –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞–ø–∫–∞ prisma-backup —Å –¥–∞–Ω–Ω—ã–º–∏
 */

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BACKUP_SOURCE = './prisma-backup';
const CURRENT_PRISMA = './prisma';

function log(message, type = 'info') {
  const timestamp = new Date().toISOString();
  const prefix = type === 'error' ? '‚ùå' : type === 'warning' ? '‚ö†Ô∏è' : type === 'success' ? '‚úÖ' : '‚ÑπÔ∏è';
  console.log(`${prefix} [${timestamp}] ${message}`);
}

function runCommand(command, description) {
  try {
    log(`–í—ã–ø–æ–ª–Ω—è—é: ${description}`);
    execSync(command, { stdio: 'inherit' });
    log(`${description} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 'success');
    return true;
  } catch (error) {
    log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: ${description}`, 'error');
    return false;
  }
}

function checkBackupExists() {
  if (!fs.existsSync(BACKUP_SOURCE)) {
    log(`–ü–∞–ø–∫–∞ ${BACKUP_SOURCE} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!`, 'error');
    log('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–∞–ø–∫–∞ prisma-backup —Å –¥–∞–Ω–Ω—ã–º–∏', 'warning');
    return false;
  }
  
  log(`–ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: ${BACKUP_SOURCE}`);
  return true;
}

function showBackupContents() {
  log('–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:');
  
  function listDir(dir, indent = '') {
    const items = fs.readdirSync(dir);
    for (const item of items) {
      const itemPath = path.join(dir, item);
      const stats = fs.statSync(itemPath);
      
      if (stats.isDirectory()) {
        log(`${indent}üìÅ ${item}/`);
        listDir(itemPath, indent + '  ');
      } else {
        const size = stats.size;
        const sizeStr = size > 1024 ? `${(size / 1024).toFixed(1)}KB` : `${size}B`;
        log(`${indent}üìÑ ${item} (${sizeStr})`);
      }
    }
  }
  
  listDir(BACKUP_SOURCE);
}

function restoreSeedFile() {
  const seedFile = path.join(BACKUP_SOURCE, 'seed.ts');
  
  if (fs.existsSync(seedFile)) {
    log('–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª seed.ts –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
    
    // –ö–æ–ø–∏—Ä—É–µ–º seed —Ñ–∞–π–ª
    fs.copyFileSync(seedFile, path.join(CURRENT_PRISMA, 'seed.ts'));
    log('–§–∞–π–ª seed.ts —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É prisma');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º seed
    if (runCommand('bun run prisma/seed.ts', '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ seed')) {
      log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ seed!');
      return true;
    } else {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ seed', 'warning');
      return false;
    }
  } else {
    log('–§–∞–π–ª seed.ts –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'warning');
    return false;
  }
}

function restoreMigrations() {
  const migrationsDir = path.join(BACKUP_SOURCE, 'migrations');
  
  if (!fs.existsSync(migrationsDir)) {
    log('–ü–∞–ø–∫–∞ migrations –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'warning');
    return false;
  }
  
  log('–ù–∞–π–¥–µ–Ω—ã –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏
  const migrations = fs.readdirSync(migrationsDir)
    .filter(item => fs.statSync(path.join(migrationsDir, item)).isDirectory())
    .sort();
  
  log(`–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–∏–≥—Ä–∞—Ü–∏–∏ (${migrations.length}):`);
  migrations.forEach((migration, index) => {
    log(`  ${index + 1}. ${migration}`);
  });
  
  // –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–∞–∫–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å
  const readline = require('readline');
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });
  
  return new Promise((resolve) => {
    rl.question('–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏? (yes/no): ', (answer) => {
      rl.close();
      
      if (answer.toLowerCase() === 'yes') {
        log('–ö–æ–ø–∏—Ä—É—é –º–∏–≥—Ä–∞—Ü–∏–∏ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
        
        // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É migrations –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        const currentMigrationsDir = path.join(CURRENT_PRISMA, 'migrations');
        if (!fs.existsSync(currentMigrationsDir)) {
          fs.mkdirSync(currentMigrationsDir, { recursive: true });
        }
        
        // –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏
        for (const migration of migrations) {
          const srcPath = path.join(migrationsDir, migration);
          const destPath = path.join(currentMigrationsDir, migration);
          
          // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–∞–ø–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏
          function copyMigrationDir(src, dest) {
            if (!fs.existsSync(dest)) {
              fs.mkdirSync(dest, { recursive: true });
            }
            
            const items = fs.readdirSync(src);
            for (const item of items) {
              const itemSrcPath = path.join(src, item);
              const itemDestPath = path.join(dest, item);
              
              if (fs.statSync(itemSrcPath).isDirectory()) {
                copyMigrationDir(itemSrcPath, itemDestPath);
              } else {
                fs.copyFileSync(itemSrcPath, itemDestPath);
              }
            }
          }
          
          copyMigrationDir(srcPath, destPath);
          log(`  ‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: ${migration}`);
        }
        
        log('–í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã. –¢–µ–ø–µ—Ä—å –ø—Ä–∏–º–µ–Ω—è—é –∏—Ö...');
        
        if (runCommand('npx prisma migrate deploy', '–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')) {
          log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!');
          resolve(true);
        } else {
          log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏', 'error');
          resolve(false);
        }
      } else {
        log('–ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã', 'warning');
        resolve(false);
      }
    });
  });
}

function restoreDatabaseFile() {
  const dbFile = path.join(BACKUP_SOURCE, 'dev.db');
  
  if (fs.existsSync(dbFile)) {
    log('–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
    
    const currentDbFile = './dev.db';
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–π –ë–î
    if (fs.existsSync(currentDbFile)) {
      const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
      const backupFile = `./dev-backup-${timestamp}.db`;
      fs.copyFileSync(currentDbFile, backupFile);
      log(`–¢–µ–∫—É—â–∞—è –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: ${backupFile}`);
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ë–î –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    fs.copyFileSync(dbFile, currentDbFile);
    log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç
    if (runCommand('npx prisma generate', '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Prisma –∫–ª–∏–µ–Ω—Ç–∞')) {
      log('‚úÖ Prisma –∫–ª–∏–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
      return true;
    } else {
      log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç', 'error');
      return false;
    }
  } else {
    log('–§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏', 'warning');
    return false;
  }
}

async function main() {
  try {
    log('üîç –ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
    
    if (!checkBackupExists()) {
      process.exit(1);
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    showBackupContents();
    
    log('\nüöÄ –ù–∞—á–∏–Ω–∞—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ seed
    let restored = restoreSeedFile();
    
    // –ï—Å–ª–∏ seed –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
    if (!restored) {
      log('\nüîÑ –ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ –º–∏–≥—Ä–∞—Ü–∏–∏...');
      restored = await restoreMigrations();
    }
    
    // –ï—Å–ª–∏ –∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –ë–î
    if (!restored) {
      log('\nüîÑ –ü—ã—Ç–∞—é—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
      restored = restoreDatabaseFile();
    }
    
    if (restored) {
      log('\nüéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!');
      log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ Prisma Studio: npx prisma studio');
    } else {
      log('\n‚ö†Ô∏è  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å', 'warning');
      log('üí° –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:', 'warning');
      log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Prisma Studio: npx prisma studio');
      log('2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç–∞—Ä–æ–π –ë–î –≤ –Ω–æ–≤—É—é');
      log('3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ SQLite Browser –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –ë–î');
    }
    
  } catch (error) {
    log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main, checkBackupExists, restoreSeedFile, restoreMigrations, restoreDatabaseFile };
