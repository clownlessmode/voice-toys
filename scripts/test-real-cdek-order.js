const { PrismaClient } = require("@prisma/client");

const prisma = new PrismaClient();

async function testRealCdekOrder() {
  try {
    console.log("üöÄ Starting REAL CDEK order test...");

    // 1. –ù–∞–π–¥–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑
    console.log("üîç Looking for existing orders...");
    const existingOrders = await prisma.order.findMany({
      take: 5,
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
      orderBy: {
        createdAt: "desc",
      },
    });

    if (existingOrders.length === 0) {
      console.log("‚ùå No orders found in database");
      return;
    }

    console.log(`üìã Found ${existingOrders.length} orders:`);
    existingOrders.forEach((order, index) => {
      console.log(
        `   ${index + 1}. ${order.orderNumber} - ${order.status} - ${
          order.deliveryType
        }`
      );
    });

    // 2. –í—ã–±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏ –∏–∑–º–µ–Ω–∏–º –µ–≥–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –°–î–≠–ö
    const orderToTest = existingOrders[0];
    console.log(`\nüéØ Selected order: ${orderToTest.orderNumber}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –°–î–≠–ö
    console.log("üì¶ Updating order to CDEK delivery...");
    const updatedOrder = await prisma.order.update({
      where: { id: orderToTest.id },
      data: {
        deliveryType: "delivery",
        deliveryAddress: "44", // –ö–æ–¥ –ú–æ—Å–∫–≤—ã (–±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ñ–∏—Å–æ–≤)
        status: "CREATED", // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–ø–ª–∞—Ç–∏—Ç—å
        paidAt: null,
      },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });

    console.log("‚úÖ Order updated:", {
      orderNumber: updatedOrder.orderNumber,
      deliveryType: updatedOrder.deliveryType,
      deliveryAddress: updatedOrder.deliveryAddress,
      status: updatedOrder.status,
    });

    // 3. –û–ø–ª–∞—á–∏–≤–∞–µ–º –∑–∞–∫–∞–∑
    console.log("üí≥ Paying order...");
    const paymentResponse = await fetch(
      `http://localhost:3001/api/orders/${updatedOrder.id}/pay`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          source: "success_page",
          transaction_id: `real-test-${Date.now()}`,
          state: "COMPLETE",
        }),
      }
    );

    if (!paymentResponse.ok) {
      const errorText = await paymentResponse.text();
      throw new Error(
        `Payment failed: ${paymentResponse.status} ${paymentResponse.statusText} - ${errorText}`
      );
    }

    const paymentResult = await paymentResponse.json();
    console.log("‚úÖ Payment result:", paymentResult);

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    console.log("üîç Checking final order status...");
    const finalOrder = await prisma.order.findUnique({
      where: { id: updatedOrder.id },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });

    console.log("üìä Final order details:", {
      id: finalOrder.id,
      orderNumber: finalOrder.orderNumber,
      status: finalOrder.status,
      paidAt: finalOrder.paidAt,
      deliveryType: finalOrder.deliveryType,
      deliveryAddress: finalOrder.deliveryAddress,
      itemsCount: finalOrder.items.length,
    });

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω
    if (finalOrder.status !== "PAID") {
      throw new Error(`Order status is ${finalOrder.status}, expected PAID`);
    }

    if (!finalOrder.paidAt) {
      throw new Error("Order paidAt is null, expected timestamp");
    }

    console.log("üéØ REAL CDEK integration test completed successfully!");
    console.log("üìã Summary:");
    console.log(`   - Order ID: ${finalOrder.id}`);
    console.log(`   - Order Number: ${finalOrder.orderNumber}`);
    console.log(`   - Status: ${finalOrder.status}`);
    console.log(`   - Paid At: ${finalOrder.paidAt}`);
    console.log(`   - Delivery Type: ${finalOrder.deliveryType}`);
    console.log(`   - Delivery Address: ${finalOrder.deliveryAddress}`);
    console.log("");
    console.log(
      "üîç Check the server logs above to see if CDEK order was created successfully."
    );
    console.log("üìß Check Telegram notifications if configured.");
    console.log("");
    console.log(
      "‚ö†Ô∏è  IMPORTANT: Check your CDEK dashboard to verify the order was actually created!"
    );
  } catch (error) {
    console.error("‚ùå Test failed:", error);
    throw error;
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testRealCdekOrder()
    .then(() => {
      console.log("‚úÖ Real CDEK test completed!");
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Real CDEK test failed:", error);
      process.exit(1);
    });
}

module.exports = { testRealCdekOrder };
