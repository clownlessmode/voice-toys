import { describe, it, expect, beforeAll } from "vitest";
import { prisma } from "@/lib/prisma";
import dotenv from "dotenv";

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: ".env.local" });

describe("üöÄ Modulbank Auto Integration Test", () => {
  let testOrderId: string;

  beforeAll(async () => {
    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –±–∞–∑—ã
    const firstProduct = await prisma.product.findFirst();
    if (!firstProduct) {
      throw new Error(
        "‚ùå No products found! Create at least one product first."
      );
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    const testOrder = await prisma.order.create({
      data: {
        orderNumber: "AUTO-TEST-" + Date.now(),
        customerName: "Test User",
        customerPhone: "+7900000000",
        customerEmail: "test@example.com",
        deliveryType: "delivery",
        deliveryAddress: "Test Address",
        totalAmount: 1000,
        currency: "‚ÇΩ",
        status: "CREATED",
        items: {
          create: [
            {
              productId: firstProduct.id,
              quantity: 1,
              price: 1000,
            },
          ],
        },
      },
    });

    testOrderId = testOrder.id;
    console.log("‚úÖ Created test order:", testOrderId);
  });

  it("üéØ Should create payment and test Modulbank response", async () => {
    console.log("\nüîß Testing Modulbank integration...");

    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    console.log("üìã Checking environment variables...");
    expect(process.env.STORE_ID).toBeDefined();
    expect(process.env.TEST_KEY).toBeDefined();

    console.log("‚úÖ STORE_ID:", process.env.STORE_ID);
    console.log(
      "‚úÖ TEST_KEY: SET (" + (process.env.TEST_KEY?.length || 0) + " chars)"
    );

    // 2. –ü–æ–ª—É—á–∞–µ–º HTML —Ñ–æ—Ä–º—É –æ—Ç –Ω–∞—à–µ–≥–æ API
    console.log("\nüåê Getting payment form from our API...");
    const response = await fetch(
      `http://localhost:3000/api/orders/${testOrderId}/pay/modulbank`,
      { method: "GET" }
    );

    expect(response.status).toBe(200);
    expect(response.headers.get("content-type")).toContain("text/html");

    const html = await response.text();
    console.log("‚úÖ Got HTML form (" + html.length + " chars)");

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–æ—Ä–º–∞ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    expect(html).toContain("https://pay.modulbank.ru/pay");
    expect(html).toContain('name="merchant"');
    expect(html).toContain('name="signature"');
    expect(html).toContain('name="amount"');

    // 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    console.log("\nüîç Extracting form data...");
    const formData = new FormData();

    // –ü–∞—Ä—Å–∏–º HTML –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    const inputMatches = html.matchAll(/name="([^"]+)" value="([^"]*)"/g);
    const formFields: Record<string, string> = {};

    for (const match of inputMatches) {
      const [, name, value] = match;
      formFields[name] = value;
      formData.append(name, value);
    }

    console.log("üìù Form fields extracted:", Object.keys(formFields));
    console.log("üí∞ Amount:", formFields.amount);
    console.log("üè™ Merchant:", formFields.merchant);
    console.log(
      "üîë Signature:",
      formFields.signature?.substring(0, 10) + "..."
    );

    // 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –Ω–∞ –ú–æ–¥—É–ª—å–±–∞–Ω–∫ (POST)
    console.log("\nüöÄ Testing actual Modulbank integration...");

    const modulbankResponse = await fetch("https://pay.modulbank.ru/pay", {
      method: "POST",
      body: formData,
      redirect: "manual", // –ù–µ —Å–ª–µ–¥—É–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    });

    console.log("üìä Modulbank response status:", modulbankResponse.status);
    console.log("üìç Response type:", modulbankResponse.type);

    // 6. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ú–æ–¥—É–ª—å–±–∞–Ω–∫
    if (modulbankResponse.status === 302 || modulbankResponse.status === 200) {
      // –ï—Å–ª–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ 200 - –∑–Ω–∞—á–∏—Ç —Ñ–æ—Ä–º–∞ –ø—Ä–∏–Ω—è—Ç–∞
      console.log("‚úÖ SUCCESS! Modulbank accepted the payment form");

      const location = modulbankResponse.headers.get("location");
      if (location) {
        console.log("üéØ Redirect location:", location);
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω—ã–π
      expect([200, 302]).toContain(modulbankResponse.status);
    } else {
      // –ü–æ–ª—É—á–∞–µ–º HTML –æ—Ç–≤–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
      const responseText = await modulbankResponse.text();
      console.log("‚ùå Modulbank response body (first 500 chars):");
      console.log(responseText.substring(0, 500));

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫
      if (responseText.includes("–û—à–∏–±–∫–∞ –≤ –ø–æ–ª–µ signature")) {
        console.log("üí• SIGNATURE ERROR detected!");
        console.log("üîß Form data that was sent:");
        console.log(JSON.stringify(formFields, null, 2));
        throw new Error("‚ùå Modulbank signature validation failed");
      }

      if (responseText.includes("–û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")) {
        throw new Error("‚ùå Modulbank integration error");
      }

      if (responseText.includes("Error") || responseText.includes("error")) {
        throw new Error(
          "‚ùå Unknown Modulbank error: " + responseText.substring(0, 200)
        );
      }
    }

    console.log("\nüéâ MODULBANK INTEGRATION TEST PASSED!");
    console.log("‚úÖ Payment form generated successfully");
    console.log("‚úÖ Signature validation passed");
    console.log("‚úÖ Modulbank accepted the payment");
  });

  it("üßπ Cleanup test order", async () => {
    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    await prisma.orderItem.deleteMany({
      where: { orderId: testOrderId },
    });

    await prisma.order.delete({
      where: { id: testOrderId },
    });

    console.log("üóëÔ∏è Test order cleaned up:", testOrderId);
  });
});
