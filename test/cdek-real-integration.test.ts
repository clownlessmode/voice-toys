import { describe, it, expect, beforeAll, afterAll } from "vitest";
import { prisma } from "../src/lib/prisma";
import { generateOrderNumber } from "../src/lib/order-utils";

describe("CDEK Real Integration", () => {
  let testOrderId: string;
  let testProductId: string;

  beforeAll(async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç
    const product = await prisma.product.create({
      data: {
        name: "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ –¥–ª—è –°–î–≠–ö",
        breadcrumbs: JSON.stringify(["–ò–≥—Ä—É—à–∫–∏", "–¢–µ—Å—Ç–æ–≤—ã–µ"]),
        images: JSON.stringify(["test-image.jpg"]),
        price: 1500,
        oldPrice: 2000,
        discountPercent: 25,
        currency: "‚ÇΩ",
        favorite: false,
        pickupAvailability: "–í –Ω–∞–ª–∏—á–∏–∏",
        deliveryAvailability: "–î–æ—Å—Ç—É–ø–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
        returnDays: 14,
        returnDetails: "–í–æ–∑–≤—Ä–∞—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π",
        description: "–¢–µ—Å—Ç–æ–≤–∞—è –∏–≥—Ä—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –°–î–≠–ö",
        categories: JSON.stringify(["test"]),
        ageGroups: JSON.stringify(["3-6"]),
      },
    });
    testProductId = product.id;

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    const order = await prisma.order.create({
      data: {
        orderNumber: generateOrderNumber(),
        status: "CREATED",
        customerName: "–¢–µ—Å—Ç –¢–µ—Å—Ç–æ–≤",
        customerPhone: "+7 (999) 123-45-67",
        customerEmail: "test@example.com",
        deliveryType: "delivery",
        deliveryAddress: "44", // –ö–æ–¥ –ú–æ—Å–∫–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        totalAmount: 1500,
        currency: "‚ÇΩ",
        items: {
          create: [
            {
              productId: testProductId,
              quantity: 1,
              price: 1500,
            },
          ],
        },
      },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });
    testOrderId = order.id;

    console.log("‚úÖ Test order created:", {
      orderId: testOrderId,
      orderNumber: order.orderNumber,
      productId: testProductId,
    });
  });

  afterAll(async () => {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    try {
      await prisma.orderItem.deleteMany({
        where: { orderId: testOrderId },
      });
      await prisma.order.delete({
        where: { id: testOrderId },
      });
      await prisma.product.delete({
        where: { id: testProductId },
      });
      console.log("‚úÖ Test data cleaned up");
    } catch (error) {
      console.error("‚ùå Error cleaning up test data:", error);
    }
  });

  it("should create order, pay it, and register in CDEK", async () => {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∏ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
    const initialOrder = await prisma.order.findUnique({
      where: { id: testOrderId },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });

    expect(initialOrder).toBeTruthy();
    expect(initialOrder?.status).toBe("CREATED");
    expect(initialOrder?.paidAt).toBeNull();
    console.log("‚úÖ Initial order status verified");

    // 2. –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ (–≤—ã–∑—ã–≤–∞–µ–º API endpoint)
    const paymentResponse = await fetch(
      `${
        process.env.NEXT_PUBLIC_APP_URL || "http://localhost:3000"
      }/api/orders/${testOrderId}/pay`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          source: "success_page",
          transaction_id: "test-transaction-123",
          state: "COMPLETE",
        }),
      }
    );

    expect(paymentResponse.ok).toBe(true);
    const paymentResult = await paymentResponse.json();
    expect(paymentResult.success).toBe(true);
    console.log("‚úÖ Payment processed successfully");

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—Ç–∞–ª –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
    const paidOrder = await prisma.order.findUnique({
      where: { id: testOrderId },
      include: {
        items: {
          include: {
            product: true,
          },
        },
      },
    });

    expect(paidOrder?.status).toBe("PAID");
    expect(paidOrder?.paidAt).toBeTruthy();
    console.log("‚úÖ Order marked as paid");

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –°–î–≠–ö
    // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ–≥–æ–≤ –∏–ª–∏
    // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π API endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –≤ –°–î–≠–ö

    console.log("üéØ Integration test completed successfully!");
    console.log("üìã Order details:", {
      id: paidOrder?.id,
      orderNumber: paidOrder?.orderNumber,
      status: paidOrder?.status,
      paidAt: paidOrder?.paidAt,
      deliveryType: paidOrder?.deliveryType,
      deliveryAddress: paidOrder?.deliveryAddress,
    });
  }, 30000); // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
});
